require 'rails_helper'
require 'shared/api/v1/unauthorized'

RSpec.describe Api::V1::ActivitiesController, type: :request do
  include RequestHelpers

  let (:host) {'http://www.example.com'}
  let (:resource_type) {'activities'}
  let (:relationship_type_transactions) {'transactions'}

  describe 'GET api/v1/activities' do
    let (:request) {'/api/v1/activities'}
    let! (:activity1) {create(:activity)}
    let! (:activity2) {create(:activity)}

    context 'with a valid api-token' do
      let (:user) {create(:user, api_token: 'X0EfAbSlaeQkXm6gFmNtKA')}

      before do
        get request, headers: {'Api-Token': user.api_token}
      end

      it 'returns all activities' do
        expected =
            {
                data: [
                    {
                        id: activity1.id.to_s,
                        type: resource_type,
                        links: {
                            self: "#{host}#{request}/#{activity1.id}"
                        },
                        attributes: {
                            'created-at': to_api_timestamp_format(activity1.created_at),
                            'updated-at': to_api_timestamp_format(activity1.updated_at),
                            name: activity1.name,
                            'suggested-amount': activity1.suggested_amount
                        },
                        relationships: {
                            transactions: {
                                links: {
                                    self: "#{host}#{request}/#{activity1.id}/relationships/#{relationship_type_transactions}",
                                    related: "#{host}#{request}/#{activity1.id}/#{relationship_type_transactions}"
                                }
                            }
                        }
                    },
                    {
                        id: activity2.id.to_s,
                        type: resource_type,
                        links: {
                            self: "#{host}#{request}/#{activity2.id}"
                        },
                        attributes: {
                            'created-at': to_api_timestamp_format(activity2.created_at),
                            'updated-at': to_api_timestamp_format(activity2.updated_at),
                            name: activity1.name,
                            'suggested-amount': activity1.suggested_amount
                        },
                        relationships: {
                            transactions: {
                                links: {
                                    self: "#{host}#{request}/#{activity2.id}/relationships/#{relationship_type_transactions}",
                                    related: "#{host}#{request}/#{activity2.id}/#{relationship_type_transactions}"
                                }
                            }
                        }
                    }
                ]
            }.with_indifferent_access

        expect(json).to eq(expected)
      end

      it 'returns a 200 (ok) status code' do
        expect(response).to have_http_status(200)
      end
    end

    context 'with an invalid api-token' do
      before do
        get request, headers: {'Api-Token': 'invalid api-token'}
      end

      expect_unauthorized_message_and_status_code
    end

    context 'without an api-token' do
      before do
        get request
      end

      expect_unauthorized_message_and_status_code
    end
  end

  describe 'GET api/v1/activities/:id' do
    let (:request) {"/api/v1/activities/#{activity.id}"}
    let! (:activity) {create(:activity)}

    context 'with a valid api-token' do
      let (:user) {create(:user, api_token: 'X0EfAbSlaeQkXm6gFmNtKA')}

      before do
        get request, headers: {'Api-Token': user.api_token}
      end

      it 'returns the activity associated with the id' do
        expected =
            {
                data: {
                    id: activity.id.to_s,
                    type: resource_type,
                    links: {
                        self: "#{host}#{request}"
                    },
                    attributes: {
                        'created-at': to_api_timestamp_format(activity.created_at),
                        'updated-at': to_api_timestamp_format(activity.updated_at),
                        name: activity.name,
                        'suggested-amount': activity.suggested_amount
                    },
                    relationships: {
                        transactions: {
                            links: {
                                self: "#{host}#{request}/relationships/#{relationship_type_transactions}",
                                related: "#{host}#{request}/#{relationship_type_transactions}"
                            }
                        }
                    }
                }
            }.with_indifferent_access

        expect(json).to eq(expected)
      end

      it 'returns a 200 (ok) status code' do
        expect(response).to have_http_status(200)
      end
    end

    context 'with an invalid api-token' do
      before do
        get request, headers: {'Api-Token': 'invalid api-token'}
      end

      expect_unauthorized_message_and_status_code
    end

    context 'without an api-token' do
      before do
        get request
      end

      expect_unauthorized_message_and_status_code
    end
  end

  describe 'POST api/v1/activities' do
    let (:request) {'/api/v1/activities'}
    let! (:activity) {build(:activity)}

    context 'with a valid api-token' do
      let (:user) {create(:user, api_token: 'X0EfAbSlaeQkXm6gFmNtKA')}

      before do
        post request,
             headers: {
                 'Api-Token': user.api_token,
                 'Content-Type': 'application/vnd.api+json'
             },
             params: {
                 data: {
                     type: resource_type,
                     attributes: {
                         name: activity.name,
                         'suggested-amount': activity.suggested_amount
                     }
                 }
             }.to_json
      end

      it 'returns the newly created activity' do
        expected =
            {
                data: {
                    id: assigned_id,
                    type: resource_type,
                    links: {
                        self: "#{host}#{request}/#{assigned_id}"
                    },
                    attributes: {
                        'created-at': assigned_created_at,
                        'updated-at': assigned_updated_at,
                        name: activity.name,
                        'suggested-amount': activity.suggested_amount
                    },
                    relationships: {
                        transactions: {
                            links: {
                                self: "#{host}#{request}/#{assigned_id}/relationships/#{relationship_type_transactions}",
                                related: "#{host}#{request}/#{assigned_id}/#{relationship_type_transactions}"
                            }
                        }
                    }
                }
            }.with_indifferent_access

        expect(json).to eq(expected)
      end

      it 'persists the newly created activity' do
        new_activity = Activity.find(assigned_id)

        expect(new_activity.name).to eq(activity.name)
        expect(new_activity.suggested_amount).to eq(activity.suggested_amount)
      end

      it 'returns a 201 (created) status code' do
        expect(response).to have_http_status(201)
      end
    end

    context 'with an invalid api-token' do
      before do
        post request,
             headers: {
                 'Api-Token': 'invalid api-token',
                 'Content-Type': 'application/vnd.api+json'
             },
             params: {
                 data: {
                     type: resource_type,
                     attributes: {
                         name: activity.name,
                         current: activity.suggested_amount
                     }
                 }
             }.to_json
      end

      expect_unauthorized_message_and_status_code
    end

    context 'without an api-token' do
      before do
        post request,
             headers: {
                 'Content-Type': 'application/vnd.api+json'
             },
             params: {
                 data: {
                     type: resource_type,
                     attributes: {
                         name: activity.name,
                         current: activity.suggested_amount
                     }
                 }
             }.to_json
      end

      expect_unauthorized_message_and_status_code
    end
  end

  describe 'PATCH api/v1/activities/:id' do
    let (:request) {"/api/v1/activities/#{activity.id}"}
    let! (:activity) {create(:activity)}
    let(:edited_name) {'edited name'}
    let(:edited_suggested_amount) {12345}

    context 'with a valid api-token' do
      let (:user) {create(:user, api_token: 'X0EfAbSlaeQkXm6gFmNtKA')}

      context 'and updated values' do
        before do
          patch request,
                headers: {
                    'Api-Token': user.api_token,
                    'Content-Type': 'application/vnd.api+json'
                },
                params: {
                    data: {
                        type: resource_type,
                        id: activity.id,
                        attributes: {
                            name: edited_name,
                            'suggested-amount': edited_suggested_amount
                        }
                    }
                }.to_json
        end

        it 'returns the updated activity associated with the id with updated values' do
          expected =
              {
                  data: {
                      id: activity.id.to_s,
                      type: resource_type,
                      links: {
                          self: "#{host}#{request}"
                      },
                      attributes: {
                          'created-at': to_api_timestamp_format(activity.created_at),
                          'updated-at': assigned_updated_at,
                          name: edited_name,
                          'suggested-amount': edited_suggested_amount
                      },
                      relationships: {
                          transactions: {
                              links: {
                                  self: "#{host}#{request}/relationships/#{relationship_type_transactions}",
                                  related: "#{host}#{request}/#{relationship_type_transactions}"
                              }
                          }
                      }
                  }
              }.with_indifferent_access

          expect(json).to eq(expected)
        end

        it 'persists the updated activity with updated values' do
          updated_activity = Activity.find(activity.id)

          expect(updated_activity.name).to eq(edited_name)
          expect(updated_activity.suggested_amount).to eq(edited_suggested_amount)
        end

        it 'returns a 200 (ok) status code' do
          expect(response).to have_http_status(200)
        end
      end

      context 'and without updated values' do
        before do
          patch request,
                headers: {'Api-Token': user.api_token, 'Content-Type': 'application/vnd.api+json'},
                params: {data: {type: resource_type, id: activity.id}}.to_json
        end

        it 'returns the updated activity associated with the id without updated values' do
          expected =
              {
                  data: {
                      id: activity.id.to_s,
                      type: resource_type,
                      links: {
                          self: "#{host}#{request}"
                      },
                      attributes: {
                          'created-at': to_api_timestamp_format(activity.created_at),
                          'updated-at': to_api_timestamp_format(activity.updated_at),
                          name: activity.name,
                          'suggested-amount': activity.suggested_amount
                      },
                      relationships: {
                          transactions: {
                              links: {
                                  self: "#{host}#{request}/relationships/#{relationship_type_transactions}",
                                  related: "#{host}#{request}/#{relationship_type_transactions}"
                              }
                          }
                      }
                  }
              }.with_indifferent_access

          expect(json).to eq(expected)
        end

        it 'persists the updated activity without updated values' do
          updated_activity = Activity.find(activity.id)

          expect(updated_activity.name).to eq(activity.name)
          expect(updated_activity.suggested_amount).to eq(activity.suggested_amount)
        end

        it 'returns a 200 (ok) status code' do
          expect(response).to have_http_status(200)
        end
      end
    end

    context 'with an invalid api-token' do
      before do
        patch request,
              headers: {
                  'Api-Token': 'invalid api-token',
                  'Content-Type': 'application/vnd.api+json'
              },
              params: {
                  data: {
                      type: resource_type,
                      id: activity.id,
                      attributes: {
                          name: edited_name,
                          'suggested-amount': edited_suggested_amount
                      }
                  }
              }.to_json
      end

      expect_unauthorized_message_and_status_code
    end

    context 'without an api-token' do
      before do
        patch request,
              headers: {
                  'Content-Type': 'application/vnd.api+json'
              },
              params: {
                  data: {
                      type: resource_type,
                      id: activity.id,
                      attributes: {
                          name: edited_name,
                          'suggested-amount': edited_suggested_amount
                      }
                  }
              }.to_json
      end

      expect_unauthorized_message_and_status_code
    end
  end

  describe 'DELETE api/v1/activities/:id' do
    let (:request) {"/api/v1/activities/#{activity.id}"}
    let! (:activity) {create(:activity)}

    context 'with a valid api-token' do
      let (:user) {create(:user, api_token: 'X0EfAbSlaeQkXm6gFmNtKA')}

      before do
        delete request, headers: {'Api-Token': user.api_token}
      end

      it 'deletes the activity associated with the id' do
        expect {Activity.find(activity.id)}.to raise_error(ActiveRecord::RecordNotFound)
      end

      it 'returns a 204 (no content) status code' do
        expect(response).to have_http_status(204)
      end
    end

    context 'with an invalid api-token' do
      before do
        delete request, headers: {'Api-Token': 'invalid api-token'}
      end

      expect_unauthorized_message_and_status_code
    end

    context 'without an api-token' do
      before do
        delete request
      end

      expect_unauthorized_message_and_status_code
    end
  end
end
