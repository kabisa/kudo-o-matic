.timeline-container
  - if @transactions.empty?
    .transaction-container
      .transaction-body-container
        .transaction-content.empty-timeline
          .empty-timeline-message
            There are no transactions to show here yet &#9785;
  - @transactions.each do |transaction|
    .transaction-container{'data-likes': transaction.votes_for.by_type(User).voters.collect { |user| user}}
      .transaction-header-container
        .transaction-kudos-container
          %span
            = "#{transaction.amount} ₭"
        .avatar
          .transaction-avatar-container
            = image_tag User.find(transaction.sender_id).picture_url, class:'sender'
            = image_tag transaction.receiver_image, class:'receiver'
        %span.post-time-stamp{id:transaction.id}
          = "#{distance_of_time_in_words(DateTime.now, transaction.created_at)} ago"
      .transaction-body-container
        .transaction-content
          %span.highlighted.sendername
            = "#{transaction.sender.name}:"
          %span.highlighted
            = "+#{transaction.amount} ₭"
          %span
            to
          %span.highlighted.receivername
            = transaction.receiver_name_feed
          %span
            for
          %span.activityname
            - activity = transaction.activity_name_feed
            - escapedActivity = html_escape(activity)
            != @markdown.render(escapedActivity)
      .transaction-footer-container
        -#%button#like-button
        -#  Like
        - if current_user.voted_for? transaction
          %button.btn.btn-primary.btn-like
            = link_to unlike_path(transaction), remote: true, method: :post, class: 'downvote-transaction' do
              .fa.fa-thumbs-up
              Liked!
        - else
          .btn.btn-secondary.btn-like
            = link_to like_path(transaction), remote: true, method: :post, class: 'upvote-transaction' do
              .fa.fa-thumbs-up
              Like
        %span.number-of-likes{class: "number-of-likes-#{transaction.id}"}
          = display_likes(transaction)
          .like-tooltip
            .like-tooltip-arrow
            - transaction.votes_for.by_type(User).voters.first(5).each do |user|
              = simple_format("#{user.name}\n")
            = tooltip_other_likes(transaction)


  = paginate @transactions
